{"id":"index.html","dependencies":[{"name":"./assets\\favicon.ico","dynamic":true,"resolved":"F:\\LiZhuang\\sceneGraphDemo\\assets\\favicon.ico","parent":"F:\\LiZhuang\\sceneGraphDemo\\index.html"},{"name":"./css\\style.css","dynamic":true,"resolved":"F:\\LiZhuang\\sceneGraphDemo\\css\\style.css","parent":"F:\\LiZhuang\\sceneGraphDemo\\index.html"},{"name":"./src\\app.js","dynamic":true,"resolved":"F:\\LiZhuang\\sceneGraphDemo\\src\\app.js","parent":"F:\\LiZhuang\\sceneGraphDemo\\index.html"}],"generated":{"html":"ï»¿<!DOCTYPE html>\r\n<head>\r\n    <meta charset=\"utf-8\">\r\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\r\n    <title>SLM Viewer</title>\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no\">\r\n    <meta name=\"description\" content=\"\">\r\n    <link rel=\"shortcut icon\" href=\"/893f776526c8894bef4fd705df682a99.ico\">\r\n    <link rel=\"stylesheet\" href=\"/6a6a912d0c7b55b537768da778032849.css\">\r\n    <script src=\"/bd9c9dcd314f2d7df52935b3a6a4d504.js\"></script>\r\n</head>\r\n<body>\r\n\t\t<script id=\"heightmapFragmentShader\" type=\"x-shader/x-fragment\">\r\n\r\n\t\t\t#include <common>\r\n\r\n\t\t\tuniform vec2 mousePos;\r\n\t\t\tuniform float mouseSize;\r\n\t\t\tuniform float viscosityConstant;\r\n\t\t\tuniform float heightCompensation;\r\n\r\n\t\t\tvoid main()\t{\r\n\r\n\t\t\t\tvec2 cellSize = 1.0 / resolution.xy;\r\n\r\n\t\t\t\tvec2 uv = gl_FragCoord.xy * cellSize;\r\n\r\n\t\t\t\tvec4 heightmapValue = texture2D( heightmap, uv );\r\n\r\n\t\t\t\t// Get neighbours\r\n\t\t\t\tvec4 north = texture2D( heightmap, uv + vec2( 0.0, cellSize.y ) );\r\n\t\t\t\tvec4 south = texture2D( heightmap, uv + vec2( 0.0, - cellSize.y ) );\r\n\t\t\t\tvec4 east = texture2D( heightmap, uv + vec2( cellSize.x, 0.0 ) );\r\n\t\t\t\tvec4 west = texture2D( heightmap, uv + vec2( - cellSize.x, 0.0 ) );\r\n\r\n\t\t\t\tfloat newHeight = ( ( north.x + south.x + east.x + west.x ) * 0.5 - heightmapValue.y ) * viscosityConstant;\r\n\r\n\t\t\t\t// Mouse influence\r\n\t\t\t\tfloat mousePhase = clamp( length( ( uv - vec2( 0.5 ) ) * BOUNDS - vec2( mousePos.x, - mousePos.y ) ) * PI / mouseSize, 0.0, PI );\r\n\t\t\t\tnewHeight += ( cos( mousePhase ) + 1.0 ) * 0.28;\r\n\r\n\t\t\t\theightmapValue.y = heightmapValue.x;\r\n\t\t\t\theightmapValue.x = newHeight;\r\n\r\n\t\t\t\tgl_FragColor = heightmapValue;\r\n\r\n\t\t\t}\r\n\r\n\t\t</script>\r\n\r\n\t\t<!-- This is the water visualization shader, copied from the THREE.MeshPhongMaterial and modified: -->\r\n\t\t<script id=\"waterVertexShader\" type=\"x-shader/x-vertex\">\r\n\r\n\t\t\tuniform sampler2D heightmap;\r\n\t\t\tvarying vec2 vUv;\r\n\t\t\tvarying float heightValue;\r\n\t\t\t#define PHONG\r\n\r\n\t\t\tvarying vec3 vViewPosition;\r\n\r\n\t\t\t#ifndef FLAT_SHADED\r\n\r\n\t\t\t\tvarying vec3 vNormal;\r\n\r\n\t\t\t#endif\r\n\r\n\t\t\t#include <common>\r\n\t\t\t#include <uv_pars_vertex>\r\n\t\t\t#include <displacementmap_pars_vertex>\r\n\t\t\t#include <envmap_pars_vertex>\r\n\t\t\t#include <color_pars_vertex>\r\n\t\t\t#include <morphtarget_pars_vertex>\r\n\t\t\t#include <skinning_pars_vertex>\r\n\t\t\t#include <shadowmap_pars_vertex>\r\n\t\t\t#include <logdepthbuf_pars_vertex>\r\n\t\t\t#include <clipping_planes_pars_vertex>\r\n\r\n\t\t\tvoid main() {\r\n\t\t\t\tvUv = uv;\r\n\t\t\t\tvec2 cellSize = vec2( 1.0 / WIDTH, 1.0 / WIDTH );\r\n\r\n\t\t\t\t#include <uv_vertex>\r\n\t\t\t\t#include <color_vertex>\r\n\r\n\t\t\t\t// # include <beginnormal_vertex>\r\n\t\t\t\t// Compute normal from heightmap\r\n\t\t\t\tvec3 objectNormal = vec3(\r\n\t\t\t\t\t( texture2D( heightmap, uv + vec2( - cellSize.x, 0 ) ).x - texture2D( heightmap, uv + vec2( cellSize.x, 0 ) ).x ) * WIDTH / BOUNDS,\r\n\t\t\t\t\t( texture2D( heightmap, uv + vec2( 0, - cellSize.y ) ).x - texture2D( heightmap, uv + vec2( 0, cellSize.y ) ).x ) * WIDTH / BOUNDS,\r\n\t\t\t\t\t1.0 );\r\n\t\t\t\t//<beginnormal_vertex>\r\n\r\n\t\t\t\t#include <morphnormal_vertex>\r\n\t\t\t\t#include <skinbase_vertex>\r\n\t\t\t\t#include <skinnormal_vertex>\r\n\t\t\t\t#include <defaultnormal_vertex>\r\n\r\n\t\t\t#ifndef FLAT_SHADED // Normal computed with derivatives when FLAT_SHADED\r\n\r\n\t\t\t\tvNormal = normalize( transformedNormal );\r\n\r\n\t\t\t#endif\r\n\r\n\t\t\t\t//# include <begin_vertex>\r\n\t\t\t\theightValue = texture2D( heightmap, uv ).x;\r\n\t\t\t\tvec3 transformed = vec3( position.x, position.y, heightValue );\r\n\t\t\t\t//<begin_vertex>\r\n\r\n\t\t\t\t#include <morphtarget_vertex>\r\n\t\t\t\t#include <skinning_vertex>\r\n\t\t\t\t#include <displacementmap_vertex>\r\n\t\t\t\t#include <project_vertex>\r\n\t\t\t\t#include <logdepthbuf_vertex>\r\n\t\t\t\t#include <clipping_planes_vertex>\r\n\r\n\t\t\t\tvViewPosition = - mvPosition.xyz;\r\n\r\n\t\t\t\t#include <worldpos_vertex>\r\n\t\t\t\t#include <envmap_vertex>\r\n\t\t\t\t#include <shadowmap_vertex>\r\n\r\n\r\n\t\t\t}\r\n\r\n\t\t</script>\r\n\t\t\r\n\t\t<script id=\"smokeFragmentShader\" type=\"x-shader/x-fragment\">\r\n\t\t\t#define PHONG\r\n\t\t\tuniform vec3 diffuse;\r\n\t\t\tuniform vec3 emissive;\r\n\t\t\tuniform vec3 specular;\r\n\t\t\tuniform float shininess;\r\n\t\t\tuniform float opacity;\r\n\t\t\tuniform sampler2D texture1;\r\n\t\t\tuniform sampler2D texture2;\r\n\t\t\tvarying vec2 vUv;\r\n\t\t\tvarying float heightValue;\r\n\t\t\tuniform float time;\r\n\t\t\t#include <common>\r\n\t\t\t#include <packing>\r\n\t\t\t#include <dithering_pars_fragment>\r\n\t\t\t#include <color_pars_fragment>\r\n\t\t\t#include <uv_pars_fragment>\r\n\t\t\t#include <map_pars_fragment>\r\n\t\t\t#include <alphamap_pars_fragment>\r\n\t\t\t#include <alphatest_pars_fragment>\r\n\t\t\t#include <aomap_pars_fragment>\r\n\t\t\t#include <lightmap_pars_fragment>\r\n\t\t\t#include <emissivemap_pars_fragment>\r\n\t\t\t#include <envmap_common_pars_fragment>\r\n\t\t\t#include <envmap_pars_fragment>\r\n\t\t\t#include <fog_pars_fragment>\r\n\t\t\t#include <bsdfs>\r\n\t\t\t#include <lights_pars_begin>\r\n\t\t\t#include <normal_pars_fragment>\r\n\t\t\t#include <lights_phong_pars_fragment>\r\n\t\t\t#include <shadowmap_pars_fragment>\r\n\t\t\t#include <bumpmap_pars_fragment>\r\n\t\t\t#include <normalmap_pars_fragment>\r\n\t\t\t#include <specularmap_pars_fragment>\r\n\t\t\t#include <logdepthbuf_pars_fragment>\r\n\t\t\t#include <clipping_planes_pars_fragment>\r\n\t\t\tvoid main() {\r\n\t\t\t\tvec4 noise = texture2D( texture1, vUv );\r\n\t\t\t\tvec2 T1 = vUv + vec2( 1.5, -1.5 ) * time * 0.02;\r\n\t\t\t\tvec2 T2 = vUv + vec2( -0.5, 2.0 ) * time * 0.01;\r\n\t\t\t\tT1.x += noise.x * 2.0;\r\n\t\t\t\tT1.y += noise.y * 2.0;\r\n\t\t\t\tT2.x += noise.y * 0.2;\r\n\t\t\t\tT2.y += noise.z * 0.2;\r\n\t\t\t\tfloat p = texture2D( texture1, T1 * 2.0 ).a;\r\n\t\t\t\tvec4 temp = texture2D( texture2, T2 * 2.0 );\r\n\t\t\t\t\r\n\t\t\t\t#include <clipping_planes_fragment>\r\n\t\t\t\tvec4 diffuseColor = vec4( diffuse, opacity );\r\n\t\t\t\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\r\n\t\t\t\tvec3 totalEmissiveRadiance = emissive;\r\n\t\t\t\t#include <logdepthbuf_fragment>\r\n\t\t\t\t#include <map_fragment>\r\n\t\t\t\t#include <color_fragment>\r\n\t\t\t\t#include <alphamap_fragment>\r\n\t\t\t\t#include <alphatest_fragment>\r\n\t\t\t\t#include <specularmap_fragment>\r\n\t\t\t\t#include <normal_fragment_begin>\r\n\t\t\t\t#include <normal_fragment_maps>\r\n\t\t\t\t#include <emissivemap_fragment>\r\n\t\t\t\t#include <aomap_fragment>\r\n\t\t\t\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\r\n\t\t\t\t#include <envmap_fragment>\r\n\t\t\t\t#include <output_fragment>\r\n\t\t\t\t#include <tonemapping_fragment>\r\n\t\t\t\t#include <encodings_fragment>\r\n\t\t\t\t#include <fog_fragment>\r\n\t\t\t\t#include <premultiplied_alpha_fragment>\r\n\t\t\t\t#include <dithering_fragment>\r\n\t\t\t\tvec3 color = 0.5 * vec3(temp.r, temp.g, temp.b) + 0.5 * outgoingLight;\r\n\t\t\t\tfloat o = (heightValue+1.0) / 2.0;\r\n\t\t\t\tgl_FragColor = vec4( color, o);\r\n\t\t\t}\r\n\t\t</script>\r\n\r\n</body>\r\n"},"sourceMaps":null,"error":null,"hash":"86fb78798bd57cc05dda17bf8b320896","cacheData":{}}